
http://java.sun.com/j2se/1.5.0/docs/api/java/util/LinkedHashMap.html

http://www.roseindia.net/javatutorials/linkedhashmap.shtml

http://www.java-examples.com/simple-java-linkedhashmap-example

http://www.koders.com/java/fidD486AD9F6BE43C73C97BD2A433F90090A36A9737.aspx?s=iso+3166

http://www.exampledepot.com/egs/java.util/coll_MapOrder.html

http://www.exampledepot.com/egs/java.util/coll_HashTables.html?l=rel

http://www.exampledepot.com/egs/java.util/coll_WeakMap.html?l=rel

http://elope.wordpress.com/2007/05/16/java-collection-when-to-use-which/
http://aaronz-sakai.blogspot.com/2009/01/java-collection-performance.html



http://www.cs.helsinki.fi/u/vihavain/k03/Java/Javacol3.html
http://www.cs.helsinki.fi/u/vihavain/k03/Java/CoreJavaVolII/TreeSetTest_java.html
http://www.cs.helsinki.fi/u/vihavain/k03/Java/CoreJavaVolII/SetTest_java.html
http://www.cs.helsinki.fi/u/vihavain/k03/Java/CoreJavaVolII/LinkedListTest_java.html
http://www.cs.helsinki.fi/u/vihavain/k03/Java/CoreJavaVolII/MapTest_java.html
http://www.exampledepot.com/egs/java.util/pkg.html



http://www.theserverside.com/discussions/thread.tss?thread_id=29569
http://www.theserverside.com/discussions/thread.tss?thread_id=18445
http://forums.sun.com/thread.jspa?threadID=615849
http://forums.sun.com/thread.jspa?threadID=639077
http://www.lampos.net/sort-hashmap
http://www.experts-exchange.com/Programming/Programming_Languages/Java/Q_21508765.html
http://www.wellho.net/resources/ex.php4?item=j714/Hmapsort.java




TreeSetTest.java  

import java.util.*;

/**
   This program sorts a set of item by comparing
   their descriptions.
*/
public class TreeSetTest
{  
   public static void main(String[] args)
   {  
      SortedSet parts = new TreeSet();
      parts.add(new Item("Toaster", 1234));
      parts.add(new Item("Widget", 4562));
      parts.add(new Item("Modem", 9912));
      System.out.println(parts);

      SortedSet sortByDescription = new TreeSet(new
         Comparator()
         {  
            public int compare(Object a, Object b)
            {  
               Item itemA = (Item)a;
               Item itemB = (Item)b;
               String descrA = itemA.getDescription();
               String descrB = itemB.getDescription();
               return descrA.compareTo(descrB);
            }
         });

      sortByDescription.addAll(parts);
      System.out.println(sortByDescription);
   }
}

/**
   An item with a description and a part number.
*/
class Item implements Comparable
{ 
   /**
      Constructs an item.
      @param aDescription the item's description
      @param aPartNumber the item's part number
   */
   public Item(String aDescription, int aPartNumber)
   {  
      description = aDescription;
      partNumber = aPartNumber;
   }

   /**
      Gets the description of this item.
      @return the description
   */
   public String getDescription()
   {  
      return description;
   }

   public String toString()
   {  
      return "[descripion=" + description
         + ", partNumber=" + partNumber + "]";
   }

   public boolean equals(Object other)
   {  
      if (getClass() == other.getClass())
      {  Item otherItem = (Item)other;
         return description.equals(otherItem.description)
            && partNumber == otherItem.partNumber;
      }
      else
         return false;
   }

   public int hashCode()
   {  
      return 13 * description.hashCode() + 17 * partNumber;
   }

   public int compareTo(Object other)
   {  
      Item otherItem = (Item)other;
      return partNumber - otherItem.partNumber;
   }

   private String description;
   private int partNumber;
}
TreeSetTest.java 



http://www.java-samples.com/showtutorial.php?tutorialid=370

