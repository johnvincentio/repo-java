-- collection; mars; use LinkedHashMap and TreeMap
`makePackage()`

import java.io.Serializable;
import java.util.Comparator;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.TreeMap;

`makeStartClass(getCollectionClassName())`

	private Map<`getKeyBeanClassName()`, `getCollectionItemClassName()`> m_collection;
	private TreeMap<`getKeyBeanClassName()`, `getCollectionItemClassName()`> m_treeMap;

`makeMembers()`

	public MarsInfo (int capacity) {
		m_collection = new LinkedHashMap <`getKeyBeanClassName()`, `getBeanClassName()`> (capacity);
		m_treeMap = new TreeMap <`getKeyBeanClassName()`, DddItemInfo> (new Comparator<`getKeyBeanClassName()`> () {
			public int compare(`getKeyBeanClassName()` o1, `getKeyBeanClassName()` o2) {
				`getKeyBeanClassName()` d1 = (`getKeyBeanClassName()`) o1;
				`getKeyBeanClassName()` d2 = (`getKeyBeanClassName()`) o2;
				return d1.getName().compareTo (d2.getName());
			}
		});
	}
`makeConstructorArgs(getCollectionClassName())`

	public void add (`getKeyBeanClassName()` key, `getCollectionItemClassName()` item) {
		if (key != null && item != null) {
			m_collection.put (key, item);
			m_treeMap.put (key, item);
		}
	}
	public Iterator getItems() {return m_treeMap.values().iterator();}
	public int getSize() {return m_collection.size();}
	public boolean isNone() {return getSize() < 1;}

`makeGetters()`

`makeSetters()`

// TODO; define public KeyItemInfo getKeyItemInfo

	public boolean isExists (`getKeyBeanClassName()` key) {return m_map.containsKey (key);}
	public `getCollectionItemClassName()` getItem (`getKeyBeanClassName()` key) {return m_map.get (key);}

`makeHashMapToString()`
}
