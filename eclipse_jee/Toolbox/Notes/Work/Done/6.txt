
***********************************************************************************
PASTED TEXT
***********************************************************************************

package com.idc.grep;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.File;
import java.io.FilenameFilter;
import java.util.ArrayList;
import java.util.Iterator;

public class Grepdir {

	public static void main(String[] args) {
		if (args.length < 2) {
			System.out.println("Usage: grepdir String Files");
			System.exit(1);
		}
		String strFind = args[0];
		String strFiles = args[1];
		String strCwd = System.getProperty("user.dir");
//		String strCwd = "c:\\work3\\wrkspc";
//		String strCwd = "C:\\irac\\src\\iRACSrc3.0_INT\\iRACSources";				
		Grepdir grepdir = new Grepdir();
		System.out.println("Searching directories :"+strCwd+":");
		grepdir.doGrepdir (strCwd, strFind, strFiles);
		System.out.println("Search is complete");
	}
	private void doGrepdir (String strDir, String strFind, String strFiles) {
//		System.out.println(">>> doGrepdir");
//		System.out.println("strFind :"+strFind+":");
//		System.out.println("strFiles :"+strFiles+":");
//		System.out.println("strDir :"+strDir+":");
		doDirectory (strDir, strFind, strFiles);
//		System.out.println("<<< doGrepdir");		
	}
	private void doDirectory (String strDir, String strFind, String strFiles) {
		File file = new File(strDir);		
		doDirectory (file, strFind, strFiles);
	}	
	private void doDirectory (File dir, String strFind, String strFiles) {
		File [] allFiles;
		File file;
				
//		System.out.println(">>> doDirectory; "+dir.getPath());
		if (! dir.isDirectory()) return;
		
// handle files
		
		GrepdirFilter filter = new GrepdirFilter();
		filter.setMask(strFiles);		
		allFiles = dir.listFiles(filter);
		for (int i=0; i<allFiles.length; i++) {
			file = allFiles[i];
			if (file.isFile()) {
//				System.out.println("(File) i = "+i+" file :"+file.getPath()+":");				
				doFile (file, strFind);
			}
		}

// handle directories

		allFiles = dir.listFiles();
		for (int i=0; i<allFiles.length; i++) {
			file = allFiles[i];
			if (file.isDirectory()) {
//				System.out.println("(Directory) i = "+i+" file :"+file.getPath()+":");				
				doDirectory (file, strFind, strFiles);
			}
		}
//		System.out.println("<<< doDirectory");
	}
	private void doFile (File file, String strFind) {
//		System.out.println(">>> doFile; "+file.getPath());
		if (! file.isFile()) return;
		
		boolean bCaseSensitive = false;
		String str = file.getName().toLowerCase();
//		System.out.println("str :"+str+":");
		if (str.indexOf(".java") > -1)
			bCaseSensitive = true;

		ArrayList<String> list = new ArrayList<String>();
		BufferedReader buf = null;
		String line;
		try {
			buf = new BufferedReader(new FileReader(file));
			while ((line = buf.readLine()) != null) {
				if (bCaseSensitive) {
					if (line.indexOf(strFind) > -1) list.add(line.trim());					
				}
				else {
					if (line.toLowerCase().indexOf(strFind.toLowerCase()) > -1)
						list.add(line.trim());
				}
			}
		}
		catch (Exception exception) {
			exception.printStackTrace();
		}
		finally {
			try {
				if (buf != null) buf.close();
			}
			catch (IOException exception2) {
				exception2.printStackTrace();
			}
		}
		if (list.size() > 0) {
			System.out.println(list.size()+" occurance(s) in file "+
					file.getPath()+"\n");
			Iterator iterator = list.iterator();
			while (iterator.hasNext()) {
				line = (String) iterator.next();
				System.out.println ("\t "+line.trim());				
			}
			System.out.println("");
		}
//		System.out.println("<<< doFile; "+file.getPath());		
		return;
	}						

	public class GrepdirFilter implements FilenameFilter {
		private String mask = "";
		private String first = "";
		private String second = "";
		public boolean accept (File dir, String name) {
//			System.out.println(">>> GrepdirFilter::accept");				
//			System.out.println("(Filter) name :"+name+":");
//			System.out.println("m :"+mask+": 1 :"+first+": 2 :"+second+":");
			if (first.length() > 0) {
				if (! name.startsWith(first)) return false;
			}
			if (second.length() > 0) {
				if (! name.endsWith(second)) return false;
			}
			if (mask.length() > 0) {
				if (! mask.equals(name)) return false;
			}
//			System.out.println("<<< GrepdirFilter::accept - true");						
			return true;
		}
		public void setMask (String mask) {
			int star = mask.indexOf("*");
			if (star < 0) {
				this.mask = mask;				
				return;
			}
			first = mask.substring(0,star);
			second = mask.substring(star+1,mask.length());
		}
	}
}



***********************************************************************************
PASTED TEXT
***********************************************************************************

package com.idc.grepgui;

/*
	To DO:
	1. pull down box for file types.
	5. pass info as parameters
	7. enter implies start - maybe KeyListener on all TextFields, enter will do the Search.
*/

import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Properties;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;

import com.idc.trace.LogHelper;

public class GrepdirGui extends JFrame implements ActionListener {
	private static final long serialVersionUID = 1;
	private static final int MAX_CNTR=1000;
	private int m_cntr = 0;
//	private static final String PROPERTIES_FILE="grepdirgui.properties";
	private String m_strPropertiesFile = "grepdirgui.properties";
	private String m_strEditor;
	private JTextArea m_messagesArea;	
	private JTextField m_stringField1;
	private JTextField m_stringField2;
	private JTextField m_stringField3;
	private JTextField m_typeField;
	private JTextField m_dirField;
	private JTextField m_editField;	
	private JButton m_btnApp;
	private JButton m_btnDir;
	private JButton m_btnEdit;
	private JButton m_btnClear;
	private JButton m_btnClearText;
	private JLabel m_txtStatus;
	private JProgressBar m_progress;
	private JFileChooser m_fileChooser;
	private JComboBox m_comboDirs;	

	private AppThread m_appThread = null;
	private Grepdir m_grepdir;

	public GrepdirGui (String msg, String[] args) {
		super(msg);
		if (args.length > 0 && args[0].length() > 8)
			m_strPropertiesFile = args[0];
		System.out.println("Properties file:"+m_strPropertiesFile);
		m_grepdir = new Grepdir(this);
		setContentPane(makeContentPane());
		this.addWindowListener (new WindowAdapter() {
			public void windowClosing (WindowEvent e) {
				doStopClient();
			}
		});
		setSize(700,900);
		pack();
		setVisible(true);	
	}
	public AppThread getAppThread() {return m_appThread;}
	public static void main(String[] args) {
		new GrepdirGui("GrepdirGUI", args);
	}

	private Container makeContentPane() {

		Properties prop = new Properties();
		try {
			prop.load(new FileInputStream(m_strPropertiesFile));
		} catch (IOException ioe) {
			System.err.println("Exception getting properties; "+ioe.getMessage());
		}
		m_strEditor = prop.getProperty("GUI_EDITOR");
		System.out.println("gui_editor :"+m_strEditor+":");

		ArrayList<File> list = new ArrayList<File>();
		String strKey, strValue;
		for (int num=1; num<11; num++) {
			strKey = "FAV_DIR_" + Integer.toString(num);
			strValue = prop.getProperty(strKey,"");
			System.out.println("key :"+strKey+": value :"+strValue+":");
			if (strValue.length() > 0) {
				File myFile = new File(strValue);
				if (myFile.isDirectory()) list.add(myFile);
			}
		}

		JPanel paneA = new JPanel();
		JLabel label1 = new JLabel("Search");
		JLabel label2 = new JLabel("File Type");
		m_stringField1 = new JTextField(10);
		m_stringField2 = new JTextField(10);
		m_stringField3 = new JTextField(10);
	
		m_typeField = new JTextField(6);
		m_typeField.setText("*.java");
		m_typeField.addActionListener(this);

		paneA.add(label1);				
		paneA.add(m_stringField1);
		paneA.add(m_stringField2);
		paneA.add(m_stringField3);
		paneA.add(label2);
		paneA.add(m_typeField);

		m_comboDirs = new JComboBox();
		Iterator iter = list.iterator();
		while(iter.hasNext()) {
			m_comboDirs.addItem(((File) iter.next()).getPath());
		}
		m_comboDirs.addItem(System.getProperty("user.dir"));
		m_comboDirs.addActionListener(this);
		m_btnDir = new JButton("Directory");
		m_btnDir.addActionListener(this);

		m_dirField = new JTextField(20);
		m_dirField.addActionListener(this);	
		m_dirField.setText((String) m_comboDirs.getItemAt(0));
		m_dirField.addActionListener(this);	

		m_fileChooser = new JFileChooser();
//		m_fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
		m_fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
//		String strCwd = System.getProperty("user.dir");
		String strCwd = getDirField();
		m_fileChooser.setCurrentDirectory(new File(strCwd));

		JPanel paneB = new JPanel();
		paneB.add(m_comboDirs);		
		paneB.add(m_btnDir);
		paneB.add(m_dirField);		

		JPanel topPane = new JPanel();
		topPane.setLayout(new BorderLayout());
		topPane.add(paneA, BorderLayout.NORTH);
		topPane.add(paneB, BorderLayout.SOUTH);

		JPanel midPane = new JPanel();
		midPane.setLayout(new BorderLayout());
		midPane.setBorder(BorderFactory.createEmptyBorder(10, 20, 10, 20));
		m_messagesArea = new JTextArea(40,80);
		m_messagesArea.setEditable(false);		
		m_messagesArea.setDragEnabled(true);	
		midPane.add(new JScrollPane(m_messagesArea),BorderLayout.CENTER);
		
		JPanel lowPane = new JPanel();
		m_btnClearText = new JButton("Clear Text");
		m_btnClearText.addActionListener(this);
		lowPane.add(m_btnClearText);
		m_btnApp = new JButton("Search");
		m_btnApp.setDefaultCapable(true);
		m_btnApp.addActionListener(this);
		lowPane.add(m_btnApp);
						
		m_txtStatus = new JLabel();
		lowPane.add (m_txtStatus);
		m_progress = new JProgressBar();
		lowPane.add(m_progress);
	
		m_editField = new JTextField(25);
		m_editField.addActionListener(this);
		m_btnEdit = new JButton("Edit");
		m_btnEdit.addActionListener(this);
		m_btnClear = new JButton("Clear");
		m_btnClear.addActionListener(this);		
		lowPane.add(m_editField);		
		lowPane.add(m_btnEdit);
		lowPane.add(m_btnClear);								

		JPanel pane = new JPanel();
		pane.setLayout(new BorderLayout());
		pane.add(topPane,BorderLayout.NORTH);
		pane.add(midPane,BorderLayout.CENTER);
		pane.add(lowPane,BorderLayout.SOUTH);			
		return pane;
	}	
	public void setButtonText (boolean bBtn) {
		final String msg;
		if (bBtn) msg = "Search";
		else msg = "Stop";
		SwingUtilities.invokeLater (
			new Runnable() {
				public void run() {
					m_btnApp.setText(msg);
				}
			}
		);
	}
	public void setEditButtonActive (final boolean bBtn) {
		SwingUtilities.invokeLater (
			new Runnable() {
				public void run() {
					m_btnEdit.setEnabled(bBtn);
				}
			}
		);
	}
	public void setDirButtonActive (final boolean bBtn) {
		SwingUtilities.invokeLater (
			new Runnable() {
				public void run() {
					m_btnDir.setEnabled(bBtn);
				}
			}
		);
	}
	public void setClearButtonActive (final boolean bBtn) {
		SwingUtilities.invokeLater (
			new Runnable() {
				public void run() {
					m_btnClear.setEnabled(bBtn);
				}
			}
		);
	}		
	public void setMessagesArea (final String msg) {
		SwingUtilities.invokeLater (
			new Runnable() {
				public void run() {
					m_messagesArea.append(msg);
					m_messagesArea.append("\n");
					m_messagesArea.setCaretPosition(
						m_messagesArea.getText().length());
					validate();
				}
			}
		);
	}
	public void clearMessagesArea () {
		SwingUtilities.invokeLater (
			new Runnable() {
				public void run() {
					m_messagesArea.setText("");
					m_messagesArea.setCaretPosition(
						m_messagesArea.getText().length());
					validate();
				}
			}
		);
	}
	public void setStatusMessage (final String msg) {
		SwingUtilities.invokeLater (
			new Runnable() {
				public void run() {
					m_txtStatus.setText(msg);
					validate();
				}
			}
		);		
	}

	public void initProgressBar (final int iMin, final int iMax) {
		SwingUtilities.invokeLater (
			new Runnable() {
				public void run() {
					m_progress.setMinimum(iMin);
					m_progress.setMaximum(iMax);
					m_progress.setValue(iMin);
					m_progress.setStringPainted(false);	// true for %age
//					m_progress.setIndeterminate(true);		// jdk 1.4
				}
			}
		);		
	}
	public void setProgressBar (final int value) {
		SwingUtilities.invokeLater (
			new Runnable() {
				public void run() {
					m_progress.setValue(value);
				}
			}
		);
	}
	private void setDirField (final String msg) {
		SwingUtilities.invokeLater (
			new Runnable() {
				public void run() {
					m_dirField.setText(msg);
					validate();
				}
			}
		);		
	}
	private void setEditField (final String msg) {
		SwingUtilities.invokeLater (
			new Runnable() {
				public void run() {
					m_editField.setText(msg);
					validate();
				}
			}
		);		
	}	
	private void searchSelected() {
//		LogHelper.info(">>> searchSelected");
		boolean bError = false;
		if (! isStringFieldValid()) bError = true;
		if (! isTypeFieldValid()) bError = true;
		if (! isDirFieldValid()) bError = true;
		if (bError) {
			setStatusMessage("Enter all the fields and press Search");
			setProgressBar(0);			
		}
		else {
			m_appThread = new AppThread(this);
			m_appThread.start();
			m_appThread.setStart();
			setStarted();
		}
//		LogHelper.info("<<< searchSelected");		
	}
	public void setStarted() {
		setButtonText(false);
		setEditButtonActive(false);
		setDirButtonActive(false);
		setClearButtonActive(false);		
	}
	public void doStopClient() {
		if (m_appThread != null) {
			m_appThread.setStop();
			try {
				while (m_appThread.isAlive()) {
					LogHelper.info("thread is alive");
					Thread.sleep(10);
					LogHelper.info("Sleeping");
				}
				LogHelper.info("thread is not alive");
			}
			catch (InterruptedException e) {
				LogHelper.info("no sleep");
			}
		}
		m_appThread = null;
		LogHelper.info("exiting app...");
		System.exit(0);
	}
	public void setStopped() {
		setButtonText(true);
		setEditButtonActive(true);
		setDirButtonActive(true);
		setClearButtonActive(true);				
	}		
	public void actionPerformed (ActionEvent e) {
		Object source = e.getSource();
		if (source instanceof JTextField) {
			LogHelper.info("textfield");
//			searchSelected();
		}
		else if (source instanceof JButton) {
			LogHelper.info("jbutton");
			if (source == m_btnApp) {
				LogHelper.info("btnApp");
				JButton jb = (JButton) e.getSource();
				String strBtn = jb.getText();
				if (strBtn.equals("Search"))
					searchSelected();
				else if (strBtn.equals("Stop")) {
					m_appThread.setStop();
					setStopped();
				}							
			}
			else if (source == m_btnDir) {
				LogHelper.info("btnDir");
				m_fileChooser.setCurrentDirectory(new File(getDirField()));
				int retval = m_fileChooser.showOpenDialog(GrepdirGui.this);
				if (retval == JFileChooser.APPROVE_OPTION) {
					File file = m_fileChooser.getSelectedFile();
					setDirField (file.getPath());
				}
			}
			else if (source == m_btnEdit) {
				LogHelper.info("btnEdit");
				String strFile = m_editField.getText().trim();
				if (strFile.length() > 0) {
					File file = new File(strFile);
					if (file.isFile())
						doEditor(strFile);
				}
			}
			else if (source == m_btnClear) {
				LogHelper.info("btnClear");
				setEditField("");
			}
			else if (source == m_btnClearText) {
				LogHelper.info("btnClearText");
				clearMessagesArea();
			}
		}
		else if (source instanceof JComboBox) {
			LogHelper.info("JComboBox");
			String strDir = (String) m_comboDirs.getSelectedItem();
			System.out.println("strdir :"+strDir+":");
			setDirField(strDir);
		}
		else
			LogHelper.info("else type");
	}
	private String getStringField1() {return m_stringField1.getText();}
	private String getStringField2() {return m_stringField2.getText();}
	private String getStringField3() {return m_stringField3.getText();}
	private String getTypeField() {return m_typeField.getText();}
	private String getDirField() {return m_dirField.getText();}
	private boolean isDirFieldValid() {
		String strDir = getDirField();
		if (strDir == null || strDir.length() < 1)	return false;
		File file = new File (strDir);
		if (! file.isDirectory()) return false;
		return true;
	}
	private boolean isTypeFieldValid() {
		if (getTypeField() == null || getTypeField().length() < 1)
			return false;
		return true;
	}
	private boolean isStringFieldValid() {
		if (getStringField1() == null || getStringField1().length() < 1)
			return false;
		return true;
	}
	public void addWord(String word) {setMessagesArea(word);}		
	public void setSize (int width, int height) {
		super.setSize (width, height);
		validate();
		repaint();
	}
	public void doEditor(String strFile) {
		String[] strCmd = {m_strEditor, strFile};		
		LogHelper.info("strCmd :"+strCmd+":");
		try {
			Runtime.getRuntime().exec(strCmd);
		}
		catch (IOException e) {
			LogHelper.info("cannot run command "+strCmd);
		}
	}
	public void doGrepdir() {
		LogHelper.info(">>> doGrepdir");
		ArrayList<String> findList = new ArrayList<String>();
		String strFind =  getStringField1();
		findList.add(strFind);
		strFind = getStringField2();
		if (strFind.length() > 0) findList.add(strFind);
		strFind = getStringField3();
		if (strFind.length() > 0) findList.add(strFind);
	
		String strDir = getDirField();
		String strFiles = getTypeField();

		setStatusMessage("searching...");
		initProgressBar(0,MAX_CNTR);
		addWord("");
		addWord("Searching from "+strDir);
		Iterator iter = findList.iterator();
		while (iter.hasNext()) {
			strFind = (String) iter.next();
			addWord("	for String "+strFind);
		}
		addWord("	in files "+strFiles);
		addWord("");

		m_grepdir.doGrepdir(strDir, findList, strFiles);

		if (m_grepdir.isSearchStopped()) {
			addWord("---------------------------------------");	
			addWord("Search stopped by user");
			addWord("---------------------------------------");
			setStatusMessage("Stopped...");
		}
		else {		
			addWord("---------------------------------------");	
			addWord("Search is complete");
			addWord("---------------------------------------");
			setProgressBar(MAX_CNTR);
			setStatusMessage("Finished...");		
		}
		LogHelper.info("<<< doGrepdir");
	}
	public void handleProgressIndicator() {
		m_cntr++;
		if (m_cntr > MAX_CNTR) m_cntr = 1;
		setProgressBar(m_cntr);		
	}
}
/*
	private void setTypeField (final String msg) {
		SwingUtilities.invokeLater (
			new Runnable() {
				public void run() {
					m_typeField.setText(msg);
					validate();
				}
			}
		);		
	}
*/


***********************************************************************************
PASTED TEXT
***********************************************************************************

package com.idc.grepgui;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.File;
import java.io.FilenameFilter;
import java.util.ArrayList;
import java.util.Iterator;

import com.idc.trace.LogHelper;

public class Grepdir {
	private GrepdirGui m_app;
	public Grepdir (GrepdirGui app) {m_app = app;}
	public boolean isSearchStopped() {
//		System.out.println("is search stopped; "+m_app.getAppThread().getStopStatus());
		return m_app.getAppThread().getStopStatus();
	}
	private void handleProgressIndicator() {m_app.handleProgressIndicator();}
	private void addMessage (String msg) {m_app.setMessagesArea(msg);}
	public void doGrepdir (String strDir, ArrayList list, String strFiles) {
		doDirectory (new File(strDir), list, strFiles);
//		System.out.println("<<< leaving doGrepdir");
	}
	private void doDirectory (File dir, ArrayList findList, String strFiles) {
		File [] allFiles;
		File file;
/*
		try {
			Thread.sleep(10L);
		}
		catch (InterruptedException ex) {
			System.out.println("thread exception; "+ex.getMessage());
		}
*/
				if (isSearchStopped()) return;	// user stopped the search
							
//		LogHelper.info(">>> doDirectory; "+dir.getPath());
		if (! dir.isDirectory()) return;
		handleProgressIndicator();
		
// handle files
		
		GrepdirFilter filter = new GrepdirFilter();
		filter.setMask(strFiles);		
		allFiles = dir.listFiles(filter);
		for (int i=0; i<allFiles.length; i++) {
			file = allFiles[i];
			if (file.isFile()) {
//				LogHelper.info("(File) i = "+i+" file :"+file.getPath()+":");
				if (isSearchStopped()) return;	// user stopped the search
				doFile (file, findList);
			}
		}

// handle directories

		allFiles = dir.listFiles();
		for (int i=0; i<allFiles.length; i++) {
			file = allFiles[i];
			if (file.isDirectory()) {
//				LogHelper.info("(Directory) i = "+i+" file :"+file.getPath()+":");
				if (isSearchStopped()) return;	// user stopped the search
				doDirectory (file, findList, strFiles);
			}
		}
//		LogHelper.info("<<< doDirectory");
	}
	private void doFile (final File file, final ArrayList findList) {
//		LogHelper.info(">>> doFile; "+file.getPath());
		if (! file.isFile()) return;
		
		boolean bCaseSensitive = false;
		String str = file.getName().toLowerCase();
//		LogHelper.info("str :"+str+":");
		if (str.indexOf(".java") > -1)
			bCaseSensitive = true;

		ArrayList<String> codeList = new ArrayList<String>();
		BufferedReader buf = null;
		String line;
		try {
			buf = new BufferedReader(new FileReader(file));
			while ((line = buf.readLine()) != null) {codeList.add(line);}
			buf = null;
		}
		catch (IOException exception) {
			System.out.println("Exception "+exception.getMessage());
			System.out.println("Trouble reading file "+file.getPath());
//			exception.printStackTrace();
		}
		finally {
			try {
				if (buf != null) buf.close();
			}
			catch (IOException exception2) {
				System.out.println("Exception "+exception2.getMessage());
				System.out.println("Trouble closing file "+file.getPath());
				exception2.printStackTrace();
			}
		}
		buf = null;

// first pass; look for all strings, they all must be found

		boolean[] abFound = new boolean[findList.size()];
		for (int i=0; i<abFound.length; i++) abFound[i] = false;

		Iterator iter = codeList.iterator();	// parse through the code line by line
		while(iter.hasNext()) {
			String strCode = (String) iter.next();
			for (int i=0; i<findList.size(); i++) {	// find next string
				if (isStringFound(bCaseSensitive, strCode, (String) findList.get(i)))
					abFound[i] = true;		// string found
			}
		}
		for (int i=0; i<abFound.length; i++) {
			if (! abFound[i]) return;	// a string not found in file
		}

// second pass; list all occurances of any of the strings

		ArrayList<String> foundList = new ArrayList<String>();
		iter = codeList.iterator();
		while(iter.hasNext()) {	// parse through the code
			String strCode = (String) iter.next();
			if (isAnyStringFound(bCaseSensitive, strCode, findList))
			foundList.add(strCode.trim());
		}

// list occurances

		if (foundList.size() > 0) {
			LogHelper.info(foundList.size()+" occurance(s) in file "+
					file.getPath()+"\n");
			addMessage(foundList.size()+" occurance(s) in file "+
					file.getPath()+"\n");
			Iterator iterator = foundList.iterator();
			while (iterator.hasNext()) {
				line = (String) iterator.next();
				addMessage ("\t "+line.trim());				
			}
			addMessage("");
		}
//		LogHelper.info("<<< doFile; "+file.getPath());		
		return;
	}
	private boolean isStringFound(final boolean bCaseSensitive,
						final String strCode, final String strFind) {
		if (bCaseSensitive) {
			if (strCode.indexOf(strFind) > -1) return true;
		}
		else {
			if (strCode.toLowerCase().indexOf(strFind.toLowerCase()) > -1)
				return true;
		}
		return false;
	}
	private boolean isAnyStringFound(final boolean bCaseSensitive,
						final String strCode, final ArrayList findList) {
		Iterator iter = findList.iterator();
		while(iter.hasNext()) {
			String strFind = (String) iter.next();
			if (isStringFound(bCaseSensitive, strCode, strFind)) return true;
		}
		return false;
	}
	public class GrepdirFilter implements FilenameFilter {
		private String mask = "";
		private String first = "";
		private String second = "";
		public boolean accept (File dir, String name) {
//			LogHelper.info(">>> GrepdirFilter::accept");				
//			LogHelper.info("(Filter) name :"+name+":");
//			LogHelper.info("m :"+mask+": 1 :"+first+": 2 :"+second+":");
			if (first.length() > 0) {
				if (! name.startsWith(first)) return false;
			}
			if (second.length() > 0) {
				if (! name.endsWith(second)) return false;
			}
			if (mask.length() > 0) {
				if (! mask.equals(name)) return false;
			}
//			LogHelper.info("<<< GrepdirFilter::accept - true");						
			return true;
		}
		public void setMask (String mask) {
			int star = mask.indexOf("*");
			if (star < 0) {
				this.mask = mask;				
				return;
			}
			first = mask.substring(0,star);
			second = mask.substring(star+1,mask.length());
		}
	}
}


***********************************************************************************
PASTED TEXT
***********************************************************************************

package com.idc.grepgui;

import com.idc.trace.LogHelper;

public class AppThread extends Thread {
	private GrepdirGui m_app;
	private boolean m_bPleaseSuspendThisThread = true;
	private boolean m_bStop = false;
	
	public AppThread (GrepdirGui app) {
		LogHelper.info(">>> AppThread::constructor");
		m_app = app;
		m_bPleaseSuspendThisThread = true;
		LogHelper.info("<<< AppThread::constructor");		
	}
	public void setSuspend() {m_bPleaseSuspendThisThread = true;}
	public boolean getStopStatus() {return m_bStop;}
	private synchronized void setResume() {
		m_bPleaseSuspendThisThread = false;
		notify();
	}
	public void setStart () {
		m_bStop = false;
		setResume();
	}
	public void setStop() {
		m_bStop = true;
	}
	public void run() {
		LogHelper.info(">>> AppThread::run");
		try {
			synchronized (this) {
				while (m_bPleaseSuspendThisThread) {
					LogHelper.info("suspending thread");
					wait();
				}
			}
		}
		catch (InterruptedException e) {
			e.printStackTrace();
		}			
		m_app.doGrepdir();
		m_app.setStopped();
		LogHelper.info("<<< AppThread::run");
	}
}
